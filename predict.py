from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import torch
import torch.nn as nn
from transformers import AutoTokenizer, AutoModel
import psycopg2
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()

DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")

# K·∫øt n·ªëi PostgreSQL v·ªõi x·ª≠ l√Ω l·ªói
def connect_db():
    try:
        conn = psycopg2.connect(database=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_PORT)
        return conn
    except Exception as e:
        print(f"L·ªói k·∫øt n·ªëi DB: {e}")
        return None

# ====== T·∫†O B·∫¢NG NEWS ======
def create_table():
    conn = connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS news (
                    id SERIAL PRIMARY KEY,
                    content TEXT NOT NULL,
                    predicted_label TEXT NOT NULL
                );
            """)
            conn.commit()
            cursor.close()
            conn.close()
            print("B·∫£ng 'news' ƒë√£ ƒë∆∞·ª£c t·∫°o ho·∫∑c ƒë√£ t·ªìn t·∫°i.")
        except Exception as e:
            print(f"L·ªói khi t·∫°o b·∫£ng: {e}")

# ====== LOAD M√î H√åNH ======
PHOBERT_MODEL_NAME = "vinai/phobert-base"
NUM_CLASSES = 4

print("ƒêang t·∫£i m√¥ h√¨nh PhoBERT...")
tokenizer = AutoTokenizer.from_pretrained(PHOBERT_MODEL_NAME)
phobert_model = AutoModel.from_pretrained(PHOBERT_MODEL_NAME)
print("PhoBERT ƒë√£ t·∫£i xong!")

class ConvNet(nn.Module):
    def __init__(self, input_size, output_size):
        super(ConvNet, self).__init__()
        self.fc1 = nn.Linear(input_size, 512)
        self.fc2 = nn.Linear(512, 256)
        self.fc3 = nn.Linear(256, 64)
        self.fc4 = nn.Linear(64, output_size)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.relu(self.fc3(x))
        logits = self.fc4(x)
        probs = torch.softmax(logits, dim=1)
        return logits, probs

print(" ƒêang t·∫£i m√¥ h√¨nh ph√¢n lo·∫°i...")
input_size = 768
model = ConvNet(input_size, NUM_CLASSES)
try:
    model.load_state_dict(torch.load("tindochai_model.pth", map_location=torch.device('cpu')))
    model.eval()
    print("M√¥ h√¨nh ph√¢n lo·∫°i ƒë√£ t·∫£i xong!")
except Exception as e:
    print(f"L·ªói t·∫£i m√¥ h√¨nh: {e}")

label_mapping = {
    0: "Tin th∆∞·ªùng",
    1: "Tin vu kh·ªëng, b√¥i nh·ªç (Tin ƒë·ªôc h·∫°i)",
    2: "Tin k√™u g·ªçi ch·ªëng ƒë·ªëi (Tin ƒë·ªôc h·∫°i)",
    3: "Tin th√∫c ƒë·∫©y t∆∞ t∆∞·ªüng c·ª±c ƒëoan (Tin ƒë·ªôc h·∫°i)"
}

def predict_label(text):
    if not text.strip():
        return "N·ªôi dung tr·ªëng"

    encoded_input = tokenizer(text, padding=True, truncation=True, return_tensors='pt', max_length=256)
    with torch.no_grad():
        model_output = phobert_model(**encoded_input)
    
    text_feature = model_output.last_hidden_state[:, 0, :].numpy()
    feature_tensor = torch.tensor(text_feature, dtype=torch.float32)
    
    logits, probs = model(feature_tensor)
    predicted_class = torch.argmax(probs, dim=1).item()
    
    return label_mapping.get(predicted_class, "Kh√¥ng x√°c ƒë·ªãnh")

app = Flask(__name__)
CORS(app)  # üöÄ Fix l·ªói CORS

# @app.route('/predict', methods=['POST'])
# def classify_text():
#     data = request.json
#     text = data.get("text", "")

#     if not text:
#         return jsonify({"error": "H√£y nh·∫≠p tin t·ª©c! "}), 400

#     predicted_label = predict_label(text)

#     conn = connect_db()
#     if conn:
#         try:
#             cursor = conn.cursor()
#             cursor.execute("INSERT INTO news (content, predicted_label) VALUES (%s, %s) RETURNING id;", 
#                            (text, predicted_label))
#             message_id = cursor.fetchone()[0]
#             conn.commit()
#             cursor.close()
#             conn.close()
#             return jsonify({"id": message_id, "label": predicted_label})
#         except Exception as e:
#             return jsonify({"error": f"L·ªói database: {e}"}), 500
#     else:
#         return jsonify({"error": "Kh√¥ng th·ªÉ k·∫øt n·ªëi database"}), 500

@app.route('/predict', methods=['POST'])
def classify_text():
    data = request.json
    text = data.get("text", "").strip()

    if not text:
        return jsonify({"error": "H√£y nh·∫≠p tin t·ª©c! "}), 400

    conn = connect_db()
    if conn:
        try:
            cursor = conn.cursor()

            # Ki·ªÉm tra xem tin ƒë√£ t·ªìn t·∫°i trong b·∫£ng ch∆∞a
            cursor.execute("SELECT id, predicted_label FROM news WHERE content = %s;", (text,))
            existing = cursor.fetchone()

            if existing:
                # N·∫øu ƒë√£ t·ªìn t·∫°i, tr·∫£ v·ªÅ k·∫øt qu·∫£ d·ª± ƒëo√°n c≈©
                news_id, label = existing
                cursor.close()
                conn.close()
                return jsonify({"id": news_id, "label": label})
            else:
                # N·∫øu ch∆∞a c√≥, d·ª± ƒëo√°n v√† l∆∞u v√†o DB
                predicted_label = predict_label(text)
                cursor.execute("INSERT INTO news (content, predicted_label) VALUES (%s, %s) RETURNING id;",
                               (text, predicted_label))
                message_id = cursor.fetchone()[0]
                conn.commit()
                cursor.close()
                conn.close()
                return jsonify({"id": message_id, "label": predicted_label})
        except Exception as e:
            return jsonify({"error": f"L·ªói database: {e}"}), 500
    else:
        return jsonify({"error": "Kh√¥ng th·ªÉ k·∫øt n·ªëi database"}), 500


@app.route('/get-news', methods=['GET'])
def get_news():
    conn = connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT id, content, predicted_label FROM news ORDER BY id ASC;")
            news_list = cursor.fetchall()
            cursor.close()
            conn.close()

            news_data = [
                {"id": row[0], "content": row[1], "label": row[2]} for row in news_list
            ]
            return jsonify({"news": news_data})
        except Exception as e:
            return jsonify({"error": f"L·ªói database: {e}"}), 500
    else:
        return jsonify({"error": "Kh√¥ng th·ªÉ k·∫øt n·ªëi database"}), 500

if __name__ == '__main__':
    create_table()  # T·ª± ƒë·ªông t·∫°o b·∫£ng khi kh·ªüi ch·∫°y
    app.run(debug=True)
